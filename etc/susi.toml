# Configuration of NoSnips services
#
# Dec. 2019, A. Dominik
#
title = "Susi/NoSnips services config"

[assistant]
language = "de"
name = "Susi"

[local]
# satellite = false    false for the main system; if true, only hotword
#                      detectiion and auidio I/O will be started
# siteId = "default"     name of satellite/room
satellite = false
siteId = "default"
work_directory = "/tmp"


[mqtt]
host = ""
port = ""
subscribe = "mosquitto_sub --qos 2"
publish = "mosquitto_pub --qos 2"

# set user/password to use authetication:
#
user = "susi"
password = "ag543jo9ikngr56hs3mg"


[hotword]
# start = true                        start hotword service
# binary = "Snowboy/bin/hotword"      path to the hotword detector
# model_path = "Snowboy/resources"    path to the hotword models
# model = "computer.pmdl"             name of hotword model
# sensitivity = 0.5
# local_hotword = "Computer"          name of the hotword
# notification = true                 play a sound when toggle on
# notification_sound = "src/Resources/Sounds/bell.wav"
# trigger_file = "hotword.toggleOff"  if this file exists, no hotwords will be detected
#
start = true
daemon = "src/Hotword/hotword.daemon"
binary = "/opt/Snowboy/rpi-arm-raspbian-8.0-1.3.0/hotword_susi.py"
model_path = "src/Snowboy/bin/resources"
model = "computer.pmdl"
sensitivity = 0.37
local_hotword = "Computer"
notification = true
notification_sound = "src/Resources/Sounds/bell.wav"
trigger_file = "hotword.toggleOff"


[record]
# start = true     start the local service to record commands
# daemon = "Record/record.daemon"     daemon binary
# binary = "Record/Sox/recCmd.sh"     command to perform recording
# recording_file = "cmd.flac"         file with recording (defines the format, too)
# recording_limit = 15                stop recording after 15 sec
# notification = true                 play sounds when starting/stopping rec
# notification_start = "Record/Sounds/startlisten.wav"
# notification_end = "Record/Sounds/stoplisten.wav"
# play = "play"                       command to play an audio file
#
start = true
daemon = "src/Record/record.daemon"
binary = "src/Record/soxrec.sh"
recording_file = "cmd.flac"
recording_limit = 15
notification = true
notification_start = "src/Resources/Sounds/bellDongDing.wav"
# notification_end = "src/Resources/Sounds/bellDingDong.wav"
play = "play -q"


[play]
# start = true     start the local service to utter text
start = true
daemon = "src/Play/play.daemon"
binary = "play"

[tts]
# start = true     start the central text-to-speech service
start = true
daemon = "src/TextToSpeach/tts.daemon"
binary = "src/GoogleCloud/tts/ttsWcache.sh"
cache = "/home/andreas/Documents/Projekte/2019-Susi/ApplicationData/TTScache"

[stt]
# start = true     start the central speech-to-text (aka ASR) service
start = true
daemon = "src/SpeechToText/stt.daemon"
binary = "src/GoogleCloud/stt/stt-google.sh"

[google_cloud]
credentials = "/home/andreas/Documents/Projekte/2019-Susi/ApplicationData/Google/Credentials/google-credentials.json"
refresh_token_cmd = "src/GoogleCloud/refreshToken.sh"

[nlu]
# start = true     start the natural language understanding service
#                  to identify intents and extract slot values
start = true
daemon = "src/NLU/nlu.daemon.jl"

[duckling]
# duckling is used to extract time and ordinal information from raw slot values.
# a locally inststalled server can be used.
#
start = true
install_dir = "/opt/Duckling/duckling"
daemon = "src/Duckling/duckling.daemon"
# binary = "stack exec duckling-example-exe"
host = "localhost"
port = "8017"

[session]
# The session manager ...
start = true
daemon = "src/Session/session.daemon"
session_timeout = 10
message_pipe = "Work/mqtt.fifo"

[skills]
start = false
daemon = "src/Skillserver/skills.daemon"

skills_dir = "/home/andreas/Documents/Projekte/2019-Susi/Skills"
