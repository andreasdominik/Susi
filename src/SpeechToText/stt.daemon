#!/bin/bash -xv
#
# STT service for NoSnips replacement.
# Usage:
#     stt.daemon path/to/nosnips.toml
#     stt.daemon #/etc/nosnips.toml
#
#

# set config path:
#
if [[ $# -lt 1 ]] ; then
  CONFIG="/etc/susi.toml"
else
  CONFIG=$1
fi

TOML="$(cat $CONFIG | toml2json)"
BASE_DIR="$(echo $TOML | jq -r .local.base_directory)"

# load tool funs:
#
source $BASE_DIR/src/Tools/funs.sh
source $BASE_DIR/src/Tools/topics.sh

# parse config from toml:
# PUBLISH, SUBSCRIBE, MQTT_PORT, MQTT_HOST,
# BASE_DIR, WORK_DIR, SITE_ID
#
readToml $CONFIG

BINARY="$(extractJSONdir .stt.binary)"
REFRESH_TOKEN_CMD="$(extractJSONdir .google_cloud.refresh_token_cmd)"
CREDS="$(extractJSONdir .google_cloud.credentials)"
STT_INPUT=audio.base64
STT_OUTPUT=cmd.ts

# construct MQTT message for hotword detected
#
# PAYLOAD="{
#   \"siteId\": \"$SITE_ID\",
#   \"modelId\": \"$LOCAL_HOTWORD\",
#   \"modelVersion\": \"1.0\",
#   \"modeltype\": \"personal\",
#   \"currentSensitivity\": $SENSITIVITY
# }"

while true ; do

  subscribeOnce $TOPIC_ASR_TRANSSCRIBE

  # extract base64 audio:
  #
  AUDIO="$(extractJSON .audio $MQTT_PAYLOAD)"
  echo "$AUDIO" > $STT_INPUT

  SESSION_ID=$MQTT_SESSION_ID
  ID=$MQTT_ID

  # check if offline:
  # ${SUSI_DIR}/src/Hardware/Internet/checkservices.sh

  # check if a new access token is necessary
  #
  $REFRESH_TOKEN_CMD $CREDS

  AUDIO_NAME="cmd.flac"
  STT_OUTPUT="cmdservice.json"
  TS_NAME="cmd.ts"

  $BINARY $STT_INPUT $STT_OUTPUT > /dev/null 2>&1

  # generate standardised JSON for Susi
  # and fix if ts is corrupted:
  #
  if [[ -s $STT_OUTPUT ]] ; then
    TRANSSCRIPT="$(cat $STT_OUTPUT)"
  else
    TRANSSCRIPT=""
  fi
  # grep 'transcript' $STT_OUTPUT
  # TS_OK=$?
  #
  # if [[ $TS_OK -eq 0 ]] ; then
  #   TS="$( cat $STT_OUTPUT | jq '.results[].alternatives[].transcript' | sed 's/[^0-9a-zA-Z]/ /g')"
  # else
  #   TS=""
  # fi

  PAYLOAD="{
            \"sessionId\": \"$SESSION_ID\",
            \"id\": \"$ID\",
            \"text\": \"$TRANSSCRIPT\"
           }"
  publish "$TOPIC_ASR_TEXT" "$PAYLOAD"

done
