#!/bin/bash 
#
# STT service for NoSnips replacement.
# Usage:
#     stt.daemon path/to/nosnips.toml
#     stt.daemon #/etc/nosnips.toml
#
#

# set config path:
#
source $SUSI_INSTALLATION/src/Tools/init_susi.sh

# base names for recveived and subm. MQTT message files:
#
MQTT_BASE_NAME="sttDaemon"
cd $local_work_directory

BINARY="$(relDir $stt_binary)"
STT_INPUT="audio.base64"
STT_OUTPUT="stt_retrieved.json"
TS_NAME="stt.transscript"

while true ; do

  subscribeOnce $TOPIC_ASR_TRANSSCRIBE
  SESSION_ID=$MQTT_SESSION_ID
  ID=$MQTT_ID

  # extract base64 audio:
  #
  extractJSONfile .audio $RECEIVED_PAYLOAD > $STT_INPUT

  # check if offline:
  # ${SUSI_DIR}/src/Hardware/Internet/checkservices.sh

  # check if a new access token is necessary
  #
  # $REFRESH_TOKEN_CMD $CREDS

  $BINARY $STT_INPUT $STT_OUTPUT > /dev/null 2>&1

  # generate standardised JSON for Susi
  # and fix if ts is corrupted:
  #
  if [[ -s $STT_OUTPUT ]] ; then
    TRANSSCRIPT="$(cat $STT_OUTPUT)"
  else
    TRANSSCRIPT=""
  fi
  # grep 'transcript' $STT_OUTPUT
  # TS_OK=$?
  #
  # if [[ $TS_OK -eq 0 ]] ; then
  #   TS="$( cat $STT_OUTPUT | jq '.results[].alternatives[].transcript' | sed 's/[^0-9a-zA-Z]/ /g')"
  # else
  #   TS=""
  # fi

  PAYLOAD="{
            \"sessionId\": \"$SESSION_ID\",
            \"id\": \"$ID\",
            \"text\": \"$TRANSSCRIPT\"
           }"
  publish "$TOPIC_ASR_TEXT" "$PAYLOAD"

done
