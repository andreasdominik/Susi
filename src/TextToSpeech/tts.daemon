#!/bin/bash -xv
#
# STT service for NoSnips replacement.
# Usage:
#     tts.daemon path/to/nosnips.toml
#     tts.daemon #/etc/nosnips.toml
#
#

# set config:
#
source $SUSI_INSTALLATION/src/Tools/init_susi.sh

# base names for recveived and subm. MQTT message files:
#
MQTT_BASE_NAME="ttsDaemon"

cd $local_work_directory

BINARY="$(relDir $tts_binary)"
REFRESH_TOKEN_CMD="$(relDir $google_cloud_refresh_token_cmd)"
CREDS="$(relDir $google_cloud_credentials)"

# Language code and cache:
#
CACHE="$(relDir $tts_cache)"

# language-specfic cache:
#
CACHE="${CACHE}/${LANGUAGE_CODE}"
if [[ ! -d $CACHE ]] ; then
    mkdir -p ${CACHE}
fi


while true ; do

  subscribeOnce $TOPIC_TTS_REQUEST

  # extract text to be spoken:
  #
  TEXT="$(extractJSONfile .input $RECEIVED_PAYLOAD)"

  # TTS daemon only speaks "his" language!
  #
  # # select language code:
  # #
  # LANG="$(extractJSONfile .lang $RECEIVED_PAYLOAD)"
  #
  # if [[ $LANG =~ "[a-z][a-z]-[A-Z][A-Z]" ]] ; then
  #   _LANGUAGE_CODE=$LANG
  # elif [[ $LANG =~ "en" ]] ; then
  #   _LANGUAGE_CODE="en-GB"
  # elif [[ $LANG =~ "[a-zA-Z][a-zA-Z]" ]] ; then
  #   _LANGUAGE_CODE="${$LANG,,}-${LANG^^}"
  # else
  #   _LANGUAGE_CODE="en-GB"
  # fi

  CACHED_NAME=$(echo $TEXT | tr '/' '_' | sed 's/[^(0-9a-zA-Z)]/_/g').b64

  # name of audio file, base64-encoded and result payload:
  #
  MQTT_COUNTER=$(($MQTT_COUNTER + 1))
  PAYLOAD_FILE="${MQTT_BASE_NAME}-$(printf "%04d" $MQTT_COUNTER).payload"
  AUDIO_NAME="audio${MQTT_COUNTER}.base64"
  rm -f $AUDIO_NAME

  # use caching
  #
  if [[ -e ${CACHE}/${CACHED_NAME} ]] ; then
    cp ${CACHE}/${CACHED_NAME} $AUDIO_NAME
  else
    $BINARY $AUDIO_NAME $TEXT > /dev/null 2>&1

    if [[ -s ${AUDIO_NAME} ]]; then
        if [[ $LEN -lt 256 ]] ; then
            cp ${AUDIO_NAME} ${CACHE}/${CACHED_NAME}
        fi
    fi
  fi

  # generate standardised JSON for Susi
  # and fix if ts is corrupted:
  #
  if [[ ! -e $AUDIO_NAME ]] ; then
    touch $AUDIO_NAME
  fi


  echo -n "{
            \"sessionId\": \"$MQTT_SESSION_ID\",
            \"id\": \"$MQTT_ID\",
            \"audio\": \""      >  $PAYLOAD_FILE
  cat $AUDIO_NAME               >> $PAYLOAD_FILE
  echo  "\"  }"                 >> $PAYLOAD_FILE

  publishFile $TOPIC_TTS_AUDIO $PAYLOAD_FILE

done
