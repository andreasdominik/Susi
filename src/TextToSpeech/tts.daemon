#!/bin/bash -xv
#
# STT service for NoSnips replacement.
# Usage:
#     tts.daemon path/to/nosnips.toml
#     tts.daemon #/etc/nosnips.toml
#
#

# set config path:
#
CONFIG="/etc/susi.toml"
source $SUSI_INSTALLATION/bin/toml2env $CONFIG

# load tool funs:
#
source $SUSI_INSTALLATION/src/Tools/funs.sh
source $SUSI_INSTALLATION/src/Tools/topics.sh

# base names for recveived and subm. MQTT message files:
#
MQTT_BASE_NAME="ttsDaemon"
MQTT_COUNTER=0

cd $local_work_directory

BINARY="$(relDir $tts_binary)"
REFRESH_TOKEN_CMD="$(relDir $google_cloud_refresh_token_cmd)"
CREDS="$(relDir $google_cloud_credentials)"

# Language code and cache:
#
CACHE="$(relDir $tts_cache)"
case $LANGUAGE in
    de)
        COUNTRY="DE"
        ;;
    en)
        COUNTRY="GB"
        ;;
    *)
        LANGUAGE="$(echo ${LANGUAGE:0:2} | tr A-Z a-z)"
        COUNTRY="$(echo $LANGUAGE | tr a-z A-Z)"
        ;;
esac
LANCODE="${LANGUAGE}-${COUNTRY}"

# language-specfic cache:
#
CACHE="${CACHE}/${LANCODE}"
if [[ ! -d $CACHE ]] ; then
    mkdir -p ${CACHE}
fi


while true ; do

  subscribeOnce $TOPIC_TTS_REQUEST

  # extract text to be spoken:
  #
  TEXT="$(extractJSONfile .input $RECEIVED_PAYLOAD)"
  LANG="$(extractJSONfile .lang $RECEIVED_PAYLOAD)"
  if [[ -z $LANG ]] ; then
    LANG="en"
  fi

  CACHED_NAME=$(echo $TEXT | tr '/' '_' | sed 's/[^(0-9a-zA-Z)]/_/g').b64
  # LEN=$(echo $CACHED_NAME | wc -c)

  # name of audio file, base64-encoded and result payload:
  #
  MQTT_COUNTER=$(($MQTT_COUNTER + 1))
  PAYLOAD_FILE="${MQTT_BASE_NAME}-$(printf "%04d" $MQTT_COUNTER).payload"
  AUDIO_NAME="audio${MQTT_COUNTER}.base64"
  rm -f $AUDIO_NAME

  # use caching
  #
  if [[ -e ${CACHE}/${CACHED_NAME} ]] ; then
    cp ${CACHE}/${CACHED_NAME} $AUDIO_NAME
  else
    $BINARY $AUDIO_NAME $LANCODE $CACHE $TEXT > /dev/null 2>&1
  fi

  # generate standardised JSON for Susi
  # and fix if ts is corrupted:
  #
  if [[ ! -e $AUDIO_NAME ]] ; then
    touch $AUDIO_NAME
  fi


  echo -n "{
            \"sessionId\": \"$MQTT_SESSION_ID\",
            \"id\": \"$MQTT_ID\",
            \"audio\": \""      >  $PAYLOAD_FILE
  cat $AUDIO_NAME               >> $PAYLOAD_FILE
  echo  "\"  }"                 >> $PAYLOAD_FILE

  publishFile $TOPIC_TTS_AUDIO $PAYLOAD_FILE

done
