#!/bin/bash -xv
#
# STT service for NoSnips replacement.
# Usage:
#     tts.daemon path/to/nosnips.toml
#     tts.daemon #/etc/nosnips.toml
#
#

# set config path:
#
CONFIG="/etc/susi.toml"
source $SUSI_INSTALLATION/bin/toml2env $CONFIG

# load tool funs:
#
source $SUSI_INSTALLATION/src/Tools/funs.sh

# Topics:
#
source $SUSI_INSTALLATION/src/Tools/topics.sh

cd $local_work_directory

BINARY="$(relDir $tts_binary)"
REFRESH_TOKEN_CMD="$(relDir $google_cloud_refresh_token_cmd)"
CREDS="$(relDir $google_cloud_credentials)"
CACHE="$(relDir $tts_cache)"

while true ; do

  subscribeOnce $TOPIC_TTS_REQUEST

  # extract text to be spoken:
  #
  TEXT="$(extractJSON .input $MQTT_PAYLOAD)"
  LANG="$(extractJSON .lang $MQTT_PAYLOAD)"
  if [[ -z $LANG ]] ; then
    LANG="de"
  fi

  # SESSION_ID=$MQTT_SESSION_ID
  # ID=$MQTT_ID

  # check if offline:
  # ${SUSI_DIR}/src/Hardware/Internet/checkservices.sh

  # check if a new access token is necessary
  #
  $REFRESH_TOKEN_CMD $CREDS

  # name of audio file, base64-encoded:
  #
  AUDIO_NAME="audio.base64"
  rm -f $AUDIO_NAME

  $BINARY $AUDIO_NAME $LANG $CACHE $TEXT > /dev/null 2>&1

  # generate standardised JSON for Susi
  # and fix if ts is corrupted:
  #
  if [[ -s $AUDIO_NAME ]] ; then
    AUDIO="$(cat $AUDIO_NAME)"
  else
    AUDIO=""
  fi

  PAYLOAD="{
            \"sessionId\": \"$MQTT_SESSION_ID\",
            \"id\": \"$MQTT_ID\",
            \"siteId\": \"$MQTT_SITE_ID\",
            \"audio\": \"$(cat $AUDIO_NAME)\"
           }"
  publish "$TOPIC_TTS_AUDIO" "$PAYLOAD"

done
