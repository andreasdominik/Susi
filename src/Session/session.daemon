#!/bin/bash
#
# Session manager for NoSnips replacement service.
# Usage:
#     session.daemon path/to/nosnips.toml
#
# https://github.com/dbohdan/remarshal is used for reading toml
# jq is used for parsing JSON
#

# set config file:
#
source $SUSI_INSTALLATION/src/Tools/init_susi.sh
source $SUSI_INSTALLATION/src/Session/dialogueManagerActions.sh

# base names for recveived and subm. MQTT message files:
#
MQTT_BASE_NAME="SusiSessionDaemon"
LOG_FILE=$session_log

MQTT_CLIENT_ID="sessionManager-$RANDOM"
MQTT_MESSAGE_PIPE="$(relDir $session_message_pipe)"
# mqtt_subscribe="$mqtt_subscribe --id $MQTT_CLIENT_ID -c"

cd $local_work_directory

# start listener and write to pipe:
#
if [[ -e $MQTT_MESSAGE_PIPE ]] ; then
  rm -f $MQTT_MESSAGE_PIPE
fi
mkfifo $MQTT_MESSAGE_PIPE

# subscribe to all incoming topics:
#
_TOPICS="-t $TOPIC_ASR_AUDIO -t $TOPIC_ASR_TEXT \
        -t $TOPIC_NLU_NOT -t $TOPIC_NLU_PARSED \
        -t $TOPIC_TTS_AUDIO -t $TOPIC_TTS_SAY \
        -t $TOPIC_PLAY -t $TOPIC_PLAY_FINISHED \
        -t $TOPIC_TIMEOUT \
        -t $TOPIC_HOTWORD \
        -t $TOPIC_CONTINUE_SESSION -t $TOPIC_END_SESSION \
        -t $TOPIC_START_SESSION \
        -t $TOPIC_DIALOGUE_STOP_LISTEN -t $TOPIC_DIALOGUE_START_LISTEN"
TOPICS=$(echo $_TOPICS)

printLog  "$mqtt_subscribe -v $(mqtt_auth) $TOPICS > $MQTT_MESSAGE_PIPE"
$mqtt_subscribe -v $(mqtt_auth) $TOPICS > $MQTT_MESSAGE_PIPE &

# core loop that catches all MQTTs depending on
# state:
#
DOING="no_session"            # what the DM is currently doing
NEXT_DOING="nothing_special"  # whar the DM shall do after teh current say/play task
SESSION_ID="no_session"       # id of current session
USER_DEFINED_ID="undefined"   # id given by the user with say/play to identify
                              # a finished topic
ERROR_ACTION="terminate_session"   # what to do if an record/tts/asr/nlu error
                              # happens: by default the sesison continues; new
                              # sessions are terminated diretctly
                              # values: "continue_session", "terminate_session"
CUSTOM_DATA=""                # data provided by user in start/continue session
                              # will be reported back by
                              # "dialogueManager/intentNotRecognized" and
                              # "sessionEnded"
IGNORE_TIMEOUT="false"        # during play, timeouts are ignored and
                              # republished.
LISTEN_TO_HOTWORDS="true"     # only if true, the manager will react to hotwords

LANG=$assistant_language
INTENT_FILTER="[]"

cat $MQTT_MESSAGE_PIPE | while read ONE_MESSAGE ; do

  MQTT_COUNTER=$(($MQTT_COUNTER + 1))
  RECEIVED_BASE="${MQTT_BASE_NAME}-$(printf "%04d" $MQTT_COUNTER)"
  RECEIVED_MQTT="${RECEIVED_BASE}.mqtt"
  RECEIVED_PAYLOAD="${RECEIVED_BASE}.json"
  echo $ONE_MESSAGE > $RECEIVED_MQTT
  parseMQTTfile

  printLog " "
  printLog "MQTT received topic: $MQTT_TOPIC, session: $SESSION_ID"

  # always manage timeouts if in session:
  #
  if [[ $SESSION_ID != "no_session" ]] ; then
    if [[ $MQTT_TOPIC == $TOPIC_TIMEOUT ]] ; then
      if [[ $MQTT_ID == $TIMEOUT_ID && $MQTT_SESSION_ID == $SESSION_ID ]] ; then
        printLog "    timeout matched"
        if [[ $IGNORE_TIMEOUT == "false" ]] ; then
          ERROR_ACTION="terminate_session"
          makeSessionEnd "timeout"
        else
          printLog "    timeout ignored"
          scheduleTimeOut
        fi
      fi
    else
      scheduleTimeOut
    fi
  fi

  # start new session:
  #
  if [[ $MQTT_TOPIC == $TOPIC_HOTWORD ]] ; then
    if [[ $LISTEN_TO_HOTWORDS == false ]] ; then
      printLog "    hotword matched, but ignored"
    else
      printLog "    hotword matched"
      # start session or queue the request:
      #
      if [[ $DOING == "no_session" ]] ; then
        nextId
        nextSessionId
        SESSION_SITE_ID=$MQTT_SITE_ID
        TYPE=hotword
        # sleep 1
        publishLogSessionStarted
        publishAsrStart # next: wait for audio recording
        DOING="wait_for_asr"
        scheduleTimeOut
        publishHotwordOff
      else
        addToQueue
      fi
    fi
  fi


   if [[ $MQTT_TOPIC == $TOPIC_START_SESSION ]] ; then

    printLog "    start matched"
    # start session or queue the request:
    #
    if [[ $DOING == "no_session" ]] ; then
      nextId
      nextSessionId
      SESSION_SITE_ID=$MQTT_SITE_ID
      CUSTOM_DATA="$(extractJSONfile .customData $RECEIVED_PAYLOAD)"
      scheduleTimeOut
      publishHotwordOff

      # check if action or notification or api or command:
      #
      TYPE="$(extractJSONfile .init.type $RECEIVED_PAYLOAD)"
      publishLogSessionStarted
      if [[ $TYPE == "action" ]] ; then
        extractIntentFilter ".init.intentFilter" $RECEIVED_PAYLOAD
        printLog "    intentfilter: $INTENT_FILTER"
        ERROR_ACTION="terminate_session"

        TEXT="$(extractJSONfile .init.text $RECEIVED_PAYLOAD)"
        if [[ -z $TEXT ]] ; then
          publishAsrStart # next: wait for audio recording
          DOING="wait_for_asr"
        else
          publishTTSrequest
          PLAY_SITE=$SESSION_SITE_ID
          DOING="wait_for_tts"
          NEXT_DOING="wait_for_asr"
        fi

      elif [[ $TYPE == "notification" ]] ; then
        TEXT="$(extractJSONfile .init.text $RECEIVED_PAYLOAD)"
        extractIntentFilter ".init.intentFilter" $RECEIVED_PAYLOAD
        publishTTSrequest
        DOING="wait_for_tts"
        NEXT_DOING="end_session"
        PLAY_SITE=$SESSION_SITE_ID

      elif [[ $TYPE == "api" ]] ; then
        INTENT="$(extractJSONfile .init.intent $RECEIVED_PAYLOAD)"
        publishIntent ".init.intent"
        scheduleTimeOut # because no other timeout will be issued
        DOING="session_ongoing"

      elif [[ $TYPE == "command" ]] ; then
        TEXT="$(extractJSONfile .init.text $RECEIVED_PAYLOAD)"
        extractIntentFilter ".init.intentFilter" $RECEIVED_PAYLOAD
        ERROR_ACTION="terminate_session"
        publishNluQuery
        DOING="wait_for_nlu"

      else  # wrong formatted payload:
        ERROR_ACTION="terminate_session"
        makeSessionEnd "payload wrong formatted"
      fi
    else
      addToQueue
    fi
  fi

  # a) in the chain only do something if the id matches the request:
  # b) some topics need to match the session id only (continue, end)
  # c) say should work always:
  #
  # a:
  if [[ $MQTT_ID == $ID ]] ; then
    printLog "    ID matched: $MQTT_TOPIC"
    nextId

    # manage dialogue manager sequences:
    #
    case "$MQTT_TOPIC" in

      $TOPIC_ASR_AUDIO)
        extractJSONfile .audio $RECEIVED_PAYLOAD > $AUDIO_B64
        if [[ ! -s $AUDIO_B64 ]] ; then
          makeSessionEnd "error: no audio"
        else
          publishAsrTransscribe  # next: wait for STT result
          DOING="wait_for_stt"
        fi
        ;;

      $TOPIC_ASR_TEXT)
        TEXT="$(extractJSONfile .text $RECEIVED_PAYLOAD)"
        if [[ -z $TEXT || ${#TEXT} -lt 2 ]] ; then
          makeSessionEnd "error: no transscript"
        else
          publishNluQuery
          DOING="wait_for_nlu"
        fi
        ;;

      $TOPIC_NLU_NOT)
        makeSessionEnd "error: NLU failed"
        INTENT_FILTER="[]"
        ;;

      $TOPIC_NLU_PARSED)
        publishIntent ""
        INTENT_FILTER="[]"
        ERROR_ACTION="continue_session"  # reset ERROR_ACTION because
                                         # NLU was successful
        DOING="session_ongoing"
        ;;

      $TOPIC_TTS_AUDIO)
        extractJSONfile .audio $RECEIVED_PAYLOAD > $AUDIO_B64
        if [[ -z $AUDIO ]] ; then
          # publishSessionEnded "error: no audio from TTS"
          # publishHotwordOn
          DOING="session_ongoing"
        else
          if [[ -z $PLAY_SITE ]] ; then
            PLAY_SITE=$SESSION_SITE_ID
          fi
          IGNORE_TIMEOUT="true"
          publishPlay $PLAY_SITE
          PLAY_SITE=$SESION_SITE_ID
          DOING="playing"
        fi
        ;;

      # playFinished is more, because a session may end afer play:
      #
      $TOPIC_PLAY_FINISHED)
        IGNORE_TIMEOUT="false"
        if [[ $NEXT_DOING == "end_session" ]] ; then
          ERROR_ACTION="terminate_session"
          makeSessionEnd "regular session end"
        elif [[ $NEXT_DOING == "wait_for_asr" ]] ; then  # continue session
          nextId
          publishAsrStart # next: wait for audio recording
          DOING="wait_for_asr"
        else
          if [[ $SESSION_ID == "no_session" ]] ; then
            DOING="no_session"
          else
            DOING="session_ongoing"
          fi
        fi
        # publish an additional finished with the user's is:
        #
        if [[ $USER_DEFINED_ID != "undefined" ]] ; then
          publishSayFinished $USER_DEFINED_ID
          USER_DEFINED_ID="undefined"
        fi
        ;;
    esac
  # end only if id matches - now sessionId:
  # b:
  elif [[ $MQTT_SESSION_ID == $SESSION_ID ]] ; then
    printLog "    sessionId matched: $MQTT_TOPIC"

    if [[ $MQTT_TOPIC == $TOPIC_END_SESSION ]] ; then
      TEXT="$(extractJSONfile .text $RECEIVED_PAYLOAD)"
      nextId
      publishTTSrequest
      DOING="wait_for_tts"
      NEXT_DOING="end_session"
      PLAY_SITE=$SESSION_SITE_ID

    elif [[ $MQTT_TOPIC == $TOPIC_CONTINUE_SESSION ]] ; then
      TEXT="$(extractJSONfile .text $RECEIVED_PAYLOAD)"
      extractIntentFilter ".intentFilter" $RECEIVED_PAYLOAD
      CUSTOM_DATA="$(extractJSONfile .customData $RECEIVED_PAYLOAD)"
      ERROR_ACTION="continue_session"   # do not terminate, if NLU error
      nextId
      if [[ -z $TEXT ]] ; then
        publishAsrStart # next: wait for audio recording
        DOING="wait_for_asr"
      else
        publishTTSrequest
        PLAY_SITE=$SESSION_SITE_ID
        DOING="wait_for_tts"
        NEXT_DOING="wait_for_asr"
      fi
    fi
  fi

  # say and play always possible:
  #
  if [[ $MQTT_TOPIC == $TOPIC_TTS_SAY ]] ; then
    printLog "    say matched: $MQTT_TOPIC"
    nextId
    TEXT="$(extractJSONfile .text $RECEIVED_PAYLOAD)"
    LANG="$(extractJSONfile .lang $RECEIVED_PAYLOAD)"
    if [[ -z $LANG ]] ; then
      LANG=$assistant_language
    fi
    PLAY_SITE="$(extractJSONfile .siteId $RECEIVED_PAYLOAD)"
    USER_DEFINED_ID=$MQTT_ID  # will be returned by playFinished to inform the user.
    publishTTSrequest
    NEXT_DOING=$DOING
    DOING="wait_for_tts"
  fi

  if [[ $MQTT_TOPIC == $TOPIC_PLAY ]] ; then
    printLog "    play matched: $MQTT_TOPIC"
    nextId
    USE_HOTWORD="$(extractJSONfile .hotword $RECEIVED_PAYLOAD)"
    FADE_IN="$(extractJSONfile .fade_in $RECEIVED_PAYLOAD)"
    extractJSONfile .audio $RECEIVED_PAYLOAD > $AUDIO_B64
    USER_DEFINED_ID=$MQTT_ID
    PLAY_SITE="$(extractJSONfile .siteId $RECEIVED_PAYLOAD)"
    publishPlay $PLAY_SITE $USE_HOTWORD $FADE_IN
    NEXT_DOING=$DOING
    DOING="playing"
  fi

  # switch on/off hotword listener:
  #
  if [[ $MQTT_TOPIC == $TOPIC_DIALOGUE_STOP_LISTEN ]] ; then
    LISTEN_TO_HOTWORDS=false
  elif [[ $MQTT_TOPIC == $TOPIC_DIALOGUE_START_LISTEN ]]; then
    LISTEN_TO_HOTWORDS=true
  fi


  printLog "    now doing: $DOING"
done  # loop read messages from pipe
